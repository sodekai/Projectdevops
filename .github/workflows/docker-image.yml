name: Kubernetes CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
      
    # Build the Docker image locally
    - name: Build the Docker image
      run: docker build -t my-app:latest .

    # Load the image into Minikube
    - name: Load image into Minikube
      run: |
        minikube start  
        minikube image load sodekai/docker-gs-ping:latest

    # Create namespaces
    - name: Create Namespaces
      run: |
        kubectl create namespace development || true
        kubectl create namespace production || true
        kubectl create namespace monitoring || true

    # Deploy to Development Environment
    - name: Deploy to Development
      run: |
        minikube start
        minikube image load sodekai/docker-gs-ping:latest
        kubectl apply -f k8s/development.yaml -n development --validate=false
        sleep 10 # Wait for the deployment to stabilize

    - name: Test Development Deployment Kubernetes
      run: |
        kubectl get pods -n development

    # Test the Development Deployment
    - name: Test Development Deployment
      run: |
        SERVICE_NAME=$(kubectl get svc -n development -l app=development -o jsonpath='{.items[0].metadata.name}')
        echo "Service Name: $SERVICE_NAME"
    
        DEVELOPMENT_IP=$(minikube service $SERVICE_NAME -n development --url)
        echo "Service URL: $DEVELOPMENT_IP"
        
        # Test the endpoint
        curl -f $DEVELOPMENT_IP/whoami || (echo "Development test failed" && exit 1)
  
  deploy-to-production:
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    # Deploy to Production Environment
    - name: Deploy to Production
      run: |
        minikube start
        kubectl apply -f k8s/production.yaml -n production --validate=false
        sleep 20 # Wait for the deployment to stabilize

    # Apply dev-app-monitor to use a Prometheus watcher
    - name: Apply Dev App Monitor
      run: |
        kubectl apply -f k8s/dev-app-monitor.yaml -n monitoring --validate=false

    # Install Prometheus and Grafana
    - name: Install Prometheus and Grafana
      run: |
        helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
        helm repo add grafana https://grafana.github.io/helm-charts
        helm repo update
        
        # Install Prometheus
        helm install prometheus prometheus-community/kube-prometheus-stack -n monitoring --create-namespace --set prometheus.service.nodePort=30090
        
        # Install Grafana
        helm install grafana grafana/grafana -n monitoring --set service.nodePort=30030
        
        # Wait for services to start
        sleep 60

    # Apply Alert Manager configuration
    - name: Apply Alert Manager Configuration
      run: |
        kubectl apply -f k8s/alertmanager-config.yaml --validate=false

    # Upgrade Helm chart to add a port for Alert Manager
    - name: Upgrade Alert Manager
      run: |
        helm upgrade prometheus prometheus-community/kube-prometheus-stack -n monitoring --set alertmanager.service.nodePort=30040


